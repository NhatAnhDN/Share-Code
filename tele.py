import telebot
import random
import os
bot = telebot.TeleBot("6945083379:AAF5I9_ly8DP53cIyOoMjPMb0yhZ83UTKak")
BALANCE_FILE = "balance.txt"
GITCODE_FILE = "gitcode.txt"



def read_balance():
  try:
    with open(BALANCE_FILE, "r") as f:
      balance = int(f.read())
  except FileNotFoundError:
    balance = 0
  except ValueError:
    balance = 0
  return balance

def write_balance(balance):
  try:
    with open(BALANCE_FILE, "w") as f:
      f.write(str(balance))
  except:
    pass



used_gitcodes = []


def create_gitcode(amount):
  gitcode = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',
                                   k=8))
  gitcode_amounts[gitcode] = amount
  with open(GITCODE_FILE, "a") as f:
    f.write(f"{gitcode}:{amount}\n")
  return gitcode



gitcode_amounts = {}


def read_gitcodes():
  if not os.path.exists(GITCODE_FILE):
    return
  with open(GITCODE_FILE, "r") as f:
    for line in f:
      gitcode, amount = line.strip().split(":")
      gitcode_amounts[gitcode] = int(amount)



def remove_gitcode(gitcode):
  with open(GITCODE_FILE, "r") as f:
    lines = f.readlines()
  with open(GITCODE_FILE, "w") as f:
    for line in lines:
      if not line.startswith(gitcode):
        f.write(line)



@bot.message_handler(commands=['start'])
def send_welcome(message):
  bot.reply_to(
      message,
      "Ch√†o m·ª´ng ƒë·∫øn v·ªõi game ch·∫µn l·∫ª v√† t√†i x·ªâu! H√£y ch·ªçn m·ªôt trong ba tr√≤ ch∆°i b√™n d∆∞·ªõi:\n\n( 1 ) : Ch·∫µn l·∫ª\n( 2 ) : T√†i x·ªâu\n( 3 ) : B·∫ßu Cua\n( 4 ) : ƒêo√°n m·∫∑t ƒë·ªìng xu\n( 5 ) : ƒêo√°n s·ªë \n( 6 ) : N·∫°p ti·ªÅn + gitcode\n( 7 ) : Ki·ªÉm tra s·ªë d∆∞\n( 8 ) : Tho√°t\n\n( /tacgia )"
  )
  # Read Gitcodes from the file
  read_gitcodes()



@bot.message_handler(commands=['regcode'])
def create_gitcode_handler(message):
  bot.reply_to(message, "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn cho gitcode:")
  bot.register_next_step_handler(message, process_gitcode_amount)



def process_gitcode_amount(message):
  try:
    amount = int(message.text)
    formatted_amount = "{:,.0f}".format(amount).replace(".", ",")
    gitcode = create_gitcode(amount)
    bot.reply_to(
        message,
        f"ƒê√£ t·∫°o gitcode th√†nh c√¥ng. Gitcode c·ªßa b·∫°n l√†: {gitcode} ({formatted_amount} ƒë·ªìng)."
    )
  except ValueError:
    bot.reply_to(message, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")


@bot.message_handler(func=lambda message: True)
def game(message):
  global balance, used_gitcodes
  if message.text == "1":
    if balance <= 0:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ch∆°i tr√≤ ch∆°i n√†y. Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o t√†i kho·∫£n."
      )
    else:
      bot.reply_to(
          message,
          "B·∫°n ƒë√£ ch·ªçn tr√≤ ch∆°i ch·∫µn l·∫ª. H√£y ƒëo√°n s·ªë ch·∫µn hay l·∫ª (nh·∫≠p 'ch·∫µn' ho·∫∑c 'l·∫ª'):"
      )
      bot.register_next_step_handler(message, even_odd_game)
  elif message.text == "2":
    if balance <= 0:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ch∆°i tr√≤ ch∆°i n√†y. Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o t√†i kho·∫£n."
      )
    else:
      bot.reply_to(
          message,
          "B·∫°n ƒë√£ ch·ªçn tr√≤ ch∆°i t√†i x·ªâu. H√£y ƒëo√°n t·ªïng c·ªßa hai con x√∫c x·∫Øc (nh·∫≠p 't√†i' ho·∫∑c 'x·ªâu'):"
      )
      bot.register_next_step_handler(message, dice_game)
  elif message.text == "6":
    bot.reply_to(
        message,
        "Vui l√≤ng chuy·ªÉn kho·∫£n t·ªõi t√†i kho·∫£n ng√¢n h√†ng sau:\n\nüëâS·ªë t√†i kho·∫£n: 0339466041\nüëâCh·ªß t√†i kho·∫£n: TRAN HUU HOI\nüëâT√™n ng√¢n h√†ng: MOMO\nüëâN·ªôi dung: N·∫†P TI·ªÄN BOT CLTX\nü§ùChuy·ªÉn ti·ªÅn xong ib admin zl 0339466041 ƒë·ªÉ nh·∫≠n gitcode n·∫°p ti·ªÅn\nüëâNh·∫≠p (code) ƒë·ªÉ nh·∫≠p gitcode"
    )
    bot.register_next_step_handler(message, naptien)
  elif message.text == "code":
    bot.reply_to(message, "Vui l√≤ng nh·∫≠p gitcode n·∫°p ti·ªÅn:")
    bot.register_next_step_handler(message, naptien_gitcode)
  elif message.text == "8":
    bot.reply_to(message, "C·∫£m ∆°n b·∫°n ƒë√£ ch∆°i game. H·∫πn g·∫∑p l·∫°i!")
  elif message.text == "/tacgia":
    bot.reply_to(message, "TRANHUUHOI\n\n@tranhuuhoi : ZALO : 0339466041")
  elif message.text == "7":
    formatted_balance = "{:,.0f}".format(balance).replace(".", ",")
    bot.reply_to(message,
                 f"S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† {formatted_balance} ƒë·ªìng.")
  elif message.text == "3":
    bot.reply_to(
        message,
        "H√£y ch·ªçn con v·∫≠t mu·ªën c∆∞·ª£c:\n\n( 1 ) B·∫ßu\n( 2 ) Cua\n( 3 ) T√¥m\n( 4 ) C√°\n( 5 ) G√†\n( 6 ) H·ªï"
    )
    bot.register_next_step_handler(message, animal_selection)
# t√°c gi·∫£ hhoi momo 0339466041. ·ªßng h·ªô t√¥i 1k 2k ƒë·ªÉ c√≥ ƒë·ªông l·ª±c .
  elif message.text == "4":
    if balance <= 0:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ch∆°i tr√≤ ch∆°i n√†y. Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o t√†i kho·∫£n."
      )
    else:
      bot.reply_to(
          message,
          "B·∫°n ƒë√£ ch·ªçn tr√≤ ch∆°i ƒëo√°n m·∫∑t ƒë·ªìng xu. H√£y ch·ªçn m·∫∑t ƒë·ªìng xu h√£y nh·∫≠p (M·∫∑t s·∫•p / M·∫∑t ng·ª≠a):"
      )
      bot.register_next_step_handler(message, start_toss_coin)
  elif message.text == "5":
    if balance <= 0:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ch∆°i tr√≤ ch∆°i n√†y. Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o t√†i kho·∫£n."
      )
    else:
      bot.reply_to(
          message,
          "B·∫°n ƒë√£ ch·ªçn tr√≤ ch∆°i ƒëo√°n s·ªë . Nh·∫≠p ( 1 ƒë·∫øn 5 ) ƒë·ªÉ ch∆°i ƒëo√°n s·ªë .")
      bot.register_next_step_handler(message, number_guessing_game)
  else:
    bot.reply_to(
        message,
        "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. H√£y ch·ªçn m·ªôt trong ba tr√≤ ch∆°i b√™n d∆∞·ªõi:\n\n( 1 ) : Ch·∫µn l·∫ª\n( 2 ) : T√†i x·ªâu\n( 3 ) : B·∫ßu Cua\n( 4 ) : ƒêo√°n m·∫∑t ƒë·ªìng xu\n( 5 ) : ƒêo√°n s·ªë \n( 6 ) : N·∫°p ti·ªÅn + gitcode\n( 7 ) : Ki·ªÉm tra s·ªë d∆∞\n( 8 ) : Tho√°t\n\n ( /tacgia )"
    )



def animal_selection(message):
  global balance
  animal_dict = {
      '1': 'B·∫ßu',
      '2': 'Cua',
      '3': 'T√¥m',
      '4': 'C√°',
      '5': 'G√†',
      '6': 'H·ªï'
  }
  if message.text in animal_dict.keys():
    animal = animal_dict[message.text]
    bot.reply_to(message, f"B·∫°n ƒë√£ ch·ªçn con v·∫≠t: {animal}")
    bot.reply_to(message, "H√£y nh·∫≠p s·ªë ti·ªÅn mu·ªën c∆∞·ª£c:")
    bot.register_next_step_handler(message, bet_amount_input, animal)
  else:
    bot.reply_to(message, "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.")

def bet_amount_input(message, animal):
  global balance
  try:
    bet_amount = int(message.text)
    if bet_amount <= 999:
      bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 1000 ƒë·ªìng.")
    elif bet_amount > balance:
      bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c l·ªõn h∆°n s·ªë d∆∞ hi·ªán t·∫°i.")
    else:
      # Code for B·∫ßu Cua game
      animals = ['B·∫ßu', 'Cua', 'T√¥m', 'C√°', 'G√†', 'H·ªï']
      selected_animal = animal
      bot.reply_to(message, f"Con v·∫≠t ƒë∆∞·ª£c ch·ªçn: {selected_animal}")
      result = random.choices(animals, k=3)
      bot.reply_to(message, f"Bot ƒë√£ ch·ªçn 3 con v·∫≠t: {', '.join(result)}")
      if selected_animal in result:
        balance += bet_amount
        formatted_balance = "{:,.0f}".format(balance).replace(".", ",")
        bot.reply_to(
            message,
            f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr√∫ng c∆∞·ª£c. S·ªë d∆∞ t√†i kho·∫£n: {formatted_balance} ƒë·ªìng."
        )
      else:
        balance -= bet_amount
        formatted_balance = "{:,.0f}".format(balance).replace(".", ",")
        bot.reply_to(
            message,
            f"R·∫•t ti·∫øc! B·∫°n ƒë√£ thua c∆∞·ª£c. S·ªë d∆∞ t√†i kho·∫£n: {formatted_balance} ƒë·ªìng."
        )
      write_balance(balance)
  except ValueError:
    bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.")


def start_toss_coin(message):
  global balance
  if message.text.lower() == "m·∫∑t s·∫•p":
    user_choice = "m·∫∑t s·∫•p"
  elif message.text.lower() == "m·∫∑t ng·ª≠a":
    user_choice = "m·∫∑t ng·ª≠a"
  else:
    bot.reply_to(message, "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.")
    return
  bot.reply_to(
      message,
      f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c ( {user_choice} ). Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c:")
  bot.register_next_step_handler(message,
                                 lambda m: start_toss_coin_bet(m, user_choice))


def start_toss_coin_bet(message, user_choice):
  global balance
  try:
    bet_amount = int(message.text)
    if bet_amount > balance:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c n√†y. Vui l√≤ng ƒë·∫∑t c∆∞·ª£c nh·ªè h∆°n ho·∫∑c b·∫±ng s·ªë d∆∞ t√†i kho·∫£n."
      )
    else:
      formatted_amount = "{:,.0f}".format(bet_amount).replace(".", ",")
      bot.reply_to(
          message,
          f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c {formatted_amount} ƒë·ªìng. ƒêang x√≥c ƒë·ªìng xu...")
      bot_choice = random.choice(["m·∫∑t s·∫•p", "m·∫∑t ng·ª≠a"])
      result = "thua"
      if user_choice == bot_choice:
        result = "th·∫Øng"
        balance += bet_amount
      else:
        balance -= bet_amount
      write_balance(balance)
      formatted_balance = "{:,.0f}".format(balance).replace(".", ",")
      bot.reply_to(
          message,
          f"K·∫øt qu·∫£ x√≥c ƒë·ªìng xu l√† ( {bot_choice} ) .B·∫°n {result}. S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† {formatted_balance} ƒë·ªìng."
      )
  except ValueError:
    bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")

def number_guessing_game(message):
  global balance
  try:
    user_number = int(message.text)
    if user_number < 1 or user_number > 5:
      bot.reply_to(message,
                   "S·ªë b·∫°n ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn 5.")
    else:
      bot.reply_to(
          message,
          f"B·∫°n ƒë√£ ch·ªçn s·ªë {user_number}. Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c:")
      bot.register_next_step_handler(
          message, lambda m: process_number_bet(m, user_number))
  except ValueError:
    bot.reply_to(message, "S·ªë b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")

def process_number_bet(message, user_number):
  global balance
  try:
    bet_amount = int(message.text)
    if bet_amount <= 0:
      bot.reply_to(
          message,
          "S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c l·ªõn h∆°n 0.")
    elif bet_amount > balance:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c n√†y. Vui l√≤ng ƒë·∫∑t c∆∞·ª£c nh·ªè h∆°n ho·∫∑c b·∫±ng s·ªë d∆∞ t√†i kho·∫£n."
      )
    else:
      formatted_amount = "{:,.0f}".format(bet_amount).replace(".", ",")
      bot.reply_to(
          message,
          f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c {formatted_amount} ƒë·ªìng. ƒêang ch·ªçn ng·∫´u nhi√™n 2 s·ªë..."
      )
      bot_numbers = random.sample(range(1, 6), 2)
      result = "thua"
      if user_number in bot_numbers:
        result = "th·∫Øng"
        balance += bet_amount * 2
      else:
        balance -= bet_amount
      write_balance(balance)
      formatted_balance = "{:,.0f}".format(balance).replace(".", ",")
      bot.reply_to(
          message,
          f"Bot ƒë√£ ch·ªçn 2 s·ªë: {', '.join(str(num) for num in bot_numbers)}. B·∫°n {result}. S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† {formatted_balance} ƒë·ªìng."
      )
  except ValueError:
    bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")



def even_odd_game(message):
  global balance
  if message.text.lower() == "ch·∫µn":
    user_choice = "ch·∫µn"
  elif message.text.lower() == "l·∫ª":
    user_choice = "l·∫ª"
  else:
    bot.reply_to(message, "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.")
    return
  bot.reply_to(message,
               f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c {user_choice}. Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c:")
  bot.register_next_step_handler(
      message, lambda m: process_even_odd_bet(m, user_choice))


def process_even_odd_bet(message, user_choice):
  global balance
  try:
    bet_amount = int(message.text)
    if bet_amount > balance:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c n√†y. Vui l√≤ng ƒë·∫∑t c∆∞·ª£c nh·ªè h∆°n ho·∫∑c b·∫±ng s·ªë d∆∞ t√†i kho·∫£n."
      )
    else:
      formatted_amount = "{:,.0f}".format(bet_amount).replace(".", ",")
      bot.reply_to(
          message,
          f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c {formatted_amount} ƒë·ªìng. ƒêang ch·ªçn ng·∫´u nhi√™n...")
      bot_choice = random.choice(["ch·∫µn", "l·∫ª"])
      result = "thua"
      if user_choice == bot_choice:
        result = "th·∫Øng"
        balance += bet_amount
      else:
        balance -= bet_amount
      write_balance(balance)
      formatted_balance = "{:,.0f}".format(balance).replace(".", ",")
      bot.reply_to(
          message,
          f"Bot ƒë√£ ch·ªçn {bot_choice}. B·∫°n {result}. S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† {formatted_balance} ƒë·ªìng."
      )
  except ValueError:
    bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")



def dice_game(message):
  global balance
  if message.text.lower() == "t√†i":
    user_choice = "t√†i"
  elif message.text.lower() == "x·ªâu":
    user_choice = "x·ªâu"
  else:
    bot.reply_to(message, "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.")
    return
  bot.reply_to(message,
               f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c {user_choice}. Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c:")
  bot.register_next_step_handler(message,
                                 lambda m: process_dice_bet(m, user_choice))



def process_dice_bet(message, user_choice):
  global balance
  try:
    bet_amount = int(message.text)
    if bet_amount > balance:
      bot.reply_to(
          message,
          "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c n√†y. Vui l√≤ng ƒë·∫∑t c∆∞·ª£c nh·ªè h∆°n ho·∫∑c b·∫±ng s·ªë d∆∞ t√†i kho·∫£n."
      )
    else:
      formatted_amount = "{:,.0f}".format(bet_amount).replace(".", ",")
      bot.reply_to(
          message,
          f"B·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c {formatted_amount} ƒë·ªìng. ƒêang tung x√∫c x·∫Øc...")
      dice1 = random.randint(1, 6)
      dice2 = random.randint(1, 6)
      dice3 = random.randint(1, 6)
      total = dice1 + dice2 + dice3
      if total >= 3 and total <= 10:
        bot_choice = "x·ªâu"
      elif total >= 11 and total <= 18:
        bot_choice = "t√†i"
      else:
        bot.reply_to(
            message,
            "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t√≠nh to√°n. Vui l√≤ng th·ª≠ l·∫°i.")
        return
      result = "thua"
      if user_choice == bot_choice:
        result = "th·∫Øng"
        balance += bet_amount
      else:
        balance -= bet_amount
      write_balance(balance)
      formatted_balance = "{:,.0f}".format(balance).replace(".", ",")
      bot.reply_to(
          message,
          f"üé≤ 1 => {dice1}. üé≤ 2 => {dice2}. üé≤ 3 => {dice3}. T·ªïng l√† {total}. K·∫øt qu·∫£ l√† üëâ {bot_choice}. B·∫°n {result}. S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† {formatted_balance} ƒë·ªìng."
      )
  except ValueError:
    bot.reply_to(message, "S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")


def naptien(message):
  global balance, used_gitcodes
  if balance >= 10000000:
    bot.reply_to(message,
                 "B·∫°n kh√¥ng th·ªÉ n·∫°p ti·ªÅn khi c√≤n ƒë·ªß ti·ªÅn trong t√†i kho·∫£n.")
  else:
    bot.reply_to(message, "Nh·∫≠p m√£ gitcode ƒë·ªÉ nh·∫≠n ti·ªÅn:")
    bot.register_next_step_handler(message, lambda m: naptien_gitcode(m))



def naptien_gitcode(message):
  global balance, used_gitcodes
  gitcode = message.text.upper()
  if gitcode in used_gitcodes:
    bot.reply_to(
        message,
        "Gitcode ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng tr∆∞·ªõc ƒë√≥. Vui l√≤ng nh·∫≠p m·ªôt gitcode kh√°c.")
  elif gitcode in gitcode_amounts:
    amount = gitcode_amounts[gitcode]
    balance += amount
    used_gitcodes.append(gitcode)
    write_balance(balance)
    # Remove the used Gitcode from the file
    remove_gitcode(gitcode)
    formatted_amount = "{:,}".format(amount)  # ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn v·ªõi d·∫•u ph·∫©y
    formatted_balance = "{:,}".format(balance)  # ƒê·ªãnh d·∫°ng s·ªë d∆∞ v·ªõi d·∫•u ph·∫©y
    bot.reply_to(
        message,
        f"Gitcode h·ª£p l·ªá. B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {formatted_amount} ƒë·ªìng v√†o t√†i kho·∫£n. S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† {formatted_balance} ƒë·ªìng."
    )
  else:
    bot.reply_to(message, "Gitcode kh√¥ng h·ª£p l·ªá.")




bot.polling()
